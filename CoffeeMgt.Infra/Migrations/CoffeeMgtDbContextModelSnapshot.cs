// <auto-generated />
using System;
using CoffeeMgt.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeMgt.Infra.Migrations
{
    [DbContext(typeof(CoffeeMgtDbContext))]
    partial class CoffeeMgtDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Beverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Beverages");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.BeverageIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeverageId");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("IngredientId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOptional");

                    b.Property<decimal>("RequiredUnitQuantity");

                    b.Property<decimal>("StockUnitConversion");

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BeverageId");

                    b.HasIndex("IngredientId");

                    b.ToTable("BeverageIngredient");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StockUnit")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ConvertedUnitQuantity");

                    b.Property<Guid>("IngredientId");

                    b.Property<Guid>("PantryId");

                    b.Property<string>("StockUnit");

                    b.Property<DateTimeOffset>("TransactionDate");

                    b.Property<decimal>("TransactionQuantity");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("PantryId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("OrderDate");

                    b.Property<Guid>("PantryBeverageId");

                    b.Property<int>("Quantity");

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PantryBeverageId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Pantry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("OfficeId");

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Pantries");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.PantryBeverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeverageId");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PantryId");

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BeverageId");

                    b.HasIndex("PantryId");

                    b.ToTable("PantryBeverage");
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.BeverageIngredient", b =>
                {
                    b.HasOne("CoffeeMgt.Core.Entities.Beverage", "Beverage")
                        .WithMany("Ingredients")
                        .HasForeignKey("BeverageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeMgt.Core.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Inventory", b =>
                {
                    b.HasOne("CoffeeMgt.Core.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeMgt.Core.Entities.Pantry")
                        .WithMany("Inventories")
                        .HasForeignKey("PantryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Order", b =>
                {
                    b.HasOne("CoffeeMgt.Core.Entities.PantryBeverage")
                        .WithMany("Orders")
                        .HasForeignKey("PantryBeverageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.Pantry", b =>
                {
                    b.HasOne("CoffeeMgt.Core.Entities.Office")
                        .WithMany("Pantries")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeMgt.Core.Entities.PantryBeverage", b =>
                {
                    b.HasOne("CoffeeMgt.Core.Entities.Beverage", "Beverage")
                        .WithMany()
                        .HasForeignKey("BeverageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeMgt.Core.Entities.Pantry", "Pantry")
                        .WithMany("Beverages")
                        .HasForeignKey("PantryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
